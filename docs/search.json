[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Studio",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 6, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 3, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\nAgentic Regression\n\n\n\n\n\n\nAI-agents\n\n\nAI\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 30, 2024\n\n\nAneesh Sathe\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/1 Agentic Regression/Agentic Regression.html",
    "href": "posts/1 Agentic Regression/Agentic Regression.html",
    "title": "Agentic Regression",
    "section": "",
    "text": "The point of this exercise was to see if agents can generate and run machine learning code based on a simple setup prompt and input task.\n\n\n\n\n\nimport os\nfrom pathlib import Path\nimport pprint\n\nfrom autogen import AssistantAgent, UserProxyAgent, GroupChatManager, GroupChat,ConversableAgent\nfrom autogen.coding import DockerCommandLineCodeExecutor, LocalCommandLineCodeExecutor\n\n\n\n\n\n\n# Temporary directory for the agents to store generate code\n\nwork_dir = Path(\"generated_code\")\nwork_dir.mkdir(exist_ok=True)\n\n\n\n\nmodel = \"llama3:latest\"\ntermination_msg = \"TERMINATE\"\n\nconfig_list = [\n    {\n        \"model\": model,\n        \"base_url\": \"http://localhost:11434/v1\",\n        \"api_key\": \"ollama\", # required, but not used,\n    }\n]\n\nagent_config = {\"config_list\": config_list, \"cache_seed\": 42}\n\n\n\n\n\n\nlocal_code_executor = LocalCommandLineCodeExecutor(\n    work_dir=work_dir\n)\n\ncode_executor_agent = AssistantAgent(\n    name=\"code_executor_agent\",\n    llm_config=False,\n    code_execution_config={\"executor\": local_code_executor}, # change to docker_code_executor to use docker\n    human_input_mode=\"NEVER\",\n)\n\n\n# Agent that will initiate the conversation and run the code\n\nexecutor = UserProxyAgent(\n    name=\"Executor\",\n    system_message=\"Executor. Execute the code written by the engineer.\",\n    human_input_mode=\"NEVER\",\n    code_execution_config={ \"work_dir\": work_dir},\n)\n\n\ncode_writer_system_message = \"\"\"\nPlease provide Python or shell script solutions to solve the user's tasks, which the user can execute by simply running the code. Each solution should be placed inside a code block with the first line reserved for a comment including the filename. Do not ask the user to modify the code or copy and paste results; instead, use the `print` function for output when relevant.\n1. Gather information: Write a script that outputs necessary information such as browsing/searching the web, downloading/reading a file, printing the content of a webpage or file, getting the current date/time, or checking the operating system. After displaying sufficient information to solve the task based on language skills, you may stop the code and solve the remaining task yourself. \n2. Perform a task: Write an executable script to solve the given task and output the result. If necessary, break down the problem into steps with clear explanations of which steps involve coding and which steps require language skills. Do not ask the user to modify the code or provide feedback; the code should be ready for execution.\n3. When writing an executable script, always begin with a code block and do not use escape characters or leading spaces if not required.\nPlease provide one code block per response to allow the user to easily execute each solution.\nHere are some examples of a code block with a filename comment:\n```python\n# filename: script_one.py\nprint(\"Hello, World!\")\n```\n```sh\n# filename: script_two.sh\nprintf \"Hello, World!\"\n```\n\"\"\"\n\n\n\ncode_writer_agent = ConversableAgent(\n    name=\"code_writer_agent\",\n    system_message=code_writer_system_message,\n    llm_config={\"config_list\": config_list, \"cache_seed\": None, \"temperature\":0.0, \"seed\": 52},\n    code_execution_config=False, # turn off code execution for this agent\n    max_consecutive_auto_reply=2,\n    human_input_mode=\"NEVER\",\n)\n\n\n# Start the Chat!\ntask = \"\"\"Write Python code to perform 3 class logistic regression on the iris dataset using sklearn. Create a plot to show outcomes and on the same figure plot the decision boundaries of the classifier,  the datapoints are colored according to their labels.\"\"\"\n\nchat_result = code_executor_agent.initiate_chat(\n        code_writer_agent,\n        message=task,\n        clear_history=True,\n    )\n\n\n\ncode_executor_agent (to code_writer_agent):\n\nWrite Python code to perform 3 class logistic regression on the iris dataset using sklearn. Create a plot to show outcomes and on the same figure plot the decision boundaries of the classifier,  the datapoints are colored according to their labels.\n\n--------------------------------------------------------------------------------\ncode_writer_agent (to code_executor_agent):\n\n# filename: iris_logistic_regression.py\n\n```Python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Load the iris dataset\niris = load_iris()\nX = iris.data[:, :2]  # we only take the first two features.\ny = iris.target\n\n# Train/Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\n# Logistic Regression\nlogreg = LogisticRegression(max_iter=10000)\nlogreg.fit(X_train, y_train)\n\n# Predictions\ny_pred = logreg.predict(X_test)\n\n# Accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n\n# Classification Report\nreport = classification_report(y_test, y_pred)\nprint(\"Classification Report:\\n\", report)\n\n# Confusion Matrix\nmatrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", matrix)\n\n# Plot the data points\nplt.figure(figsize=(8, 6))\nplt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap='viridis')\nplt.xlabel('Sepal length (cm)')\nplt.ylabel('Sepal width (cm)')\n\n# Plot the decision boundaries\nx_min, x_max = X_test[:, 0].min() - 1, X_test[:, 0].max() + 1\ny_min, y_max = X_test[:, 1].min() - 1, X_test[:, 1].max() + 1\n\nxx, yy = np.meshgrid(np.arange(x_min, x_max), np.arange(y_min, y_max))\nZ = logreg.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(xx, yy, Z, alpha=0.8)\nplt.colorbar(labelpad=10)\n\nplt.show()\n```\n\nThis code will perform a 3-class logistic regression on the iris dataset using scikit-learn's `LogisticRegression` class. It then plots the data points colored according to their labels and also plots the decision boundaries of the classifier.\n\n--------------------------------------------------------------------------------\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EXECUTING CODE BLOCK (inferred language is Python)...\ncode_executor_agent (to code_writer_agent):\n\nexitcode: 1 (execution failed)\nCode output: Traceback (most recent call last):\n  File \"/Users/aneeshsathe/analysis_work/autogen/generated_code/tmp_code_4e5e19a073f5e1ceb8e1b6a9aa039117.py\", line 50, in &lt;module&gt;\n    plt.colorbar(labelpad=10)\n  File \"/Users/aneeshsathe/miniconda3/envs/pyautogen/lib/python3.10/site-packages/matplotlib/pyplot.py\", line 2341, in colorbar\n    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)\n  File \"/Users/aneeshsathe/miniconda3/envs/pyautogen/lib/python3.10/site-packages/matplotlib/figure.py\", line 1310, in colorbar\n    cb = cbar.Colorbar(cax, mappable, **{\nTypeError: Colorbar.__init__() got an unexpected keyword argument 'labelpad'\nAccuracy: 0.8133333333333334\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        29\n           1       0.71      0.65      0.68        23\n           2       0.68      0.74      0.71        23\n\n    accuracy                           0.81        75\n   macro avg       0.80      0.80      0.80        75\nweighted avg       0.81      0.81      0.81        75\n\nConfusion Matrix:\n [[29  0  0]\n [ 0 15  8]\n [ 0  6 17]]\n\n\n--------------------------------------------------------------------------------\ncode_writer_agent (to code_executor_agent):\n\nThe error message indicates that the `colorbar` function does not accept a `labelpad` keyword argument. This is because the `colorbar` function in matplotlib does not have a `labelpad` parameter.\n\nTo fix this issue, you can remove the `plt.colorbar(labelpad=10)` line from your code. The colorbar will still be displayed, but it won't have any labels.\n\nHere's the corrected code:\n\n```Python\n# filename: iris_logistic_regression.py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Load the iris dataset\niris = load_iris()\nX = iris.data[:, :2]  # we only take the first two features.\ny = iris.target\n\n# Train/Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\n# Logistic Regression\nlogreg = LogisticRegression(max_iter=10000)\nlogreg.fit(X_train, y_train)\n\n# Predictions\ny_pred = logreg.predict(X_test)\n\n# Accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n\n# Classification Report\nreport = classification_report(y_test, y_pred)\nprint(\"Classification Report:\\n\", report)\n\n# Confusion Matrix\nmatrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", matrix)\n\n# Plot the data points\nplt.figure(figsize=(8, 6))\nplt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap='viridis')\nplt.xlabel('Sepal length (cm)')\nplt.ylabel('Sepal width (cm)')\n\n# Plot the decision boundaries\nx_min, x_max = X_test[:, 0].min() - 1, X_test[:, 0].max() + 1\ny_min, y_max = X_test[:, 1].min() - 1, X_test[:, 1].max() + 1\n\nxx, yy = np.meshgrid(np.arange(x_min, x_max), np.arange(y_min, y_max))\nZ = logreg.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(xx, yy, Z, alpha=0.8)\nplt.colorbar()\n\nplt.show()\n```\n\nThis code will perform a 3-class logistic regression on the iris dataset using scikit-learn's `LogisticRegression` class. It then plots the data points colored according to their labels and also plots the decision boundaries of the classifier.\n\n--------------------------------------------------------------------------------\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EXECUTING CODE BLOCK (inferred language is Python)...\ncode_executor_agent (to code_writer_agent):\n\nexitcode: 0 (execution succeeded)\nCode output: Accuracy: 0.8133333333333334\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        29\n           1       0.71      0.65      0.68        23\n           2       0.68      0.74      0.71        23\n\n    accuracy                           0.81        75\n   macro avg       0.80      0.80      0.80        75\nweighted avg       0.81      0.81      0.81        75\n\nConfusion Matrix:\n [[29  0  0]\n [ 0 15  8]\n [ 0  6 17]]\nFigure(800x600)\n\n\n--------------------------------------------------------------------------------\n\n\n\nfrom IPython.display import Image\nImage(filename=\"generated_code/logistic_reg_decision_boundaries.png\")"
  },
  {
    "objectID": "posts/1 Agentic Regression/Agentic Regression.html#setup",
    "href": "posts/1 Agentic Regression/Agentic Regression.html#setup",
    "title": "Agentic Regression",
    "section": "",
    "text": "import os\nfrom pathlib import Path\nimport pprint\n\nfrom autogen import AssistantAgent, UserProxyAgent, GroupChatManager, GroupChat,ConversableAgent\nfrom autogen.coding import DockerCommandLineCodeExecutor, LocalCommandLineCodeExecutor\n\n\n\n\n\n\n# Temporary directory for the agents to store generate code\n\nwork_dir = Path(\"generated_code\")\nwork_dir.mkdir(exist_ok=True)\n\n\n\n\nmodel = \"llama3:latest\"\ntermination_msg = \"TERMINATE\"\n\nconfig_list = [\n    {\n        \"model\": model,\n        \"base_url\": \"http://localhost:11434/v1\",\n        \"api_key\": \"ollama\", # required, but not used,\n    }\n]\n\nagent_config = {\"config_list\": config_list, \"cache_seed\": 42}\n\n\n\n\n\n\nlocal_code_executor = LocalCommandLineCodeExecutor(\n    work_dir=work_dir\n)\n\ncode_executor_agent = AssistantAgent(\n    name=\"code_executor_agent\",\n    llm_config=False,\n    code_execution_config={\"executor\": local_code_executor}, # change to docker_code_executor to use docker\n    human_input_mode=\"NEVER\",\n)\n\n\n# Agent that will initiate the conversation and run the code\n\nexecutor = UserProxyAgent(\n    name=\"Executor\",\n    system_message=\"Executor. Execute the code written by the engineer.\",\n    human_input_mode=\"NEVER\",\n    code_execution_config={ \"work_dir\": work_dir},\n)\n\n\ncode_writer_system_message = \"\"\"\nPlease provide Python or shell script solutions to solve the user's tasks, which the user can execute by simply running the code. Each solution should be placed inside a code block with the first line reserved for a comment including the filename. Do not ask the user to modify the code or copy and paste results; instead, use the `print` function for output when relevant.\n1. Gather information: Write a script that outputs necessary information such as browsing/searching the web, downloading/reading a file, printing the content of a webpage or file, getting the current date/time, or checking the operating system. After displaying sufficient information to solve the task based on language skills, you may stop the code and solve the remaining task yourself. \n2. Perform a task: Write an executable script to solve the given task and output the result. If necessary, break down the problem into steps with clear explanations of which steps involve coding and which steps require language skills. Do not ask the user to modify the code or provide feedback; the code should be ready for execution.\n3. When writing an executable script, always begin with a code block and do not use escape characters or leading spaces if not required.\nPlease provide one code block per response to allow the user to easily execute each solution.\nHere are some examples of a code block with a filename comment:\n```python\n# filename: script_one.py\nprint(\"Hello, World!\")\n```\n```sh\n# filename: script_two.sh\nprintf \"Hello, World!\"\n```\n\"\"\"\n\n\n\ncode_writer_agent = ConversableAgent(\n    name=\"code_writer_agent\",\n    system_message=code_writer_system_message,\n    llm_config={\"config_list\": config_list, \"cache_seed\": None, \"temperature\":0.0, \"seed\": 52},\n    code_execution_config=False, # turn off code execution for this agent\n    max_consecutive_auto_reply=2,\n    human_input_mode=\"NEVER\",\n)\n\n\n# Start the Chat!\ntask = \"\"\"Write Python code to perform 3 class logistic regression on the iris dataset using sklearn. Create a plot to show outcomes and on the same figure plot the decision boundaries of the classifier,  the datapoints are colored according to their labels.\"\"\"\n\nchat_result = code_executor_agent.initiate_chat(\n        code_writer_agent,\n        message=task,\n        clear_history=True,\n    )\n\n\n\ncode_executor_agent (to code_writer_agent):\n\nWrite Python code to perform 3 class logistic regression on the iris dataset using sklearn. Create a plot to show outcomes and on the same figure plot the decision boundaries of the classifier,  the datapoints are colored according to their labels.\n\n--------------------------------------------------------------------------------\ncode_writer_agent (to code_executor_agent):\n\n# filename: iris_logistic_regression.py\n\n```Python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Load the iris dataset\niris = load_iris()\nX = iris.data[:, :2]  # we only take the first two features.\ny = iris.target\n\n# Train/Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\n# Logistic Regression\nlogreg = LogisticRegression(max_iter=10000)\nlogreg.fit(X_train, y_train)\n\n# Predictions\ny_pred = logreg.predict(X_test)\n\n# Accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n\n# Classification Report\nreport = classification_report(y_test, y_pred)\nprint(\"Classification Report:\\n\", report)\n\n# Confusion Matrix\nmatrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", matrix)\n\n# Plot the data points\nplt.figure(figsize=(8, 6))\nplt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap='viridis')\nplt.xlabel('Sepal length (cm)')\nplt.ylabel('Sepal width (cm)')\n\n# Plot the decision boundaries\nx_min, x_max = X_test[:, 0].min() - 1, X_test[:, 0].max() + 1\ny_min, y_max = X_test[:, 1].min() - 1, X_test[:, 1].max() + 1\n\nxx, yy = np.meshgrid(np.arange(x_min, x_max), np.arange(y_min, y_max))\nZ = logreg.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(xx, yy, Z, alpha=0.8)\nplt.colorbar(labelpad=10)\n\nplt.show()\n```\n\nThis code will perform a 3-class logistic regression on the iris dataset using scikit-learn's `LogisticRegression` class. It then plots the data points colored according to their labels and also plots the decision boundaries of the classifier.\n\n--------------------------------------------------------------------------------\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EXECUTING CODE BLOCK (inferred language is Python)...\ncode_executor_agent (to code_writer_agent):\n\nexitcode: 1 (execution failed)\nCode output: Traceback (most recent call last):\n  File \"/Users/aneeshsathe/analysis_work/autogen/generated_code/tmp_code_4e5e19a073f5e1ceb8e1b6a9aa039117.py\", line 50, in &lt;module&gt;\n    plt.colorbar(labelpad=10)\n  File \"/Users/aneeshsathe/miniconda3/envs/pyautogen/lib/python3.10/site-packages/matplotlib/pyplot.py\", line 2341, in colorbar\n    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)\n  File \"/Users/aneeshsathe/miniconda3/envs/pyautogen/lib/python3.10/site-packages/matplotlib/figure.py\", line 1310, in colorbar\n    cb = cbar.Colorbar(cax, mappable, **{\nTypeError: Colorbar.__init__() got an unexpected keyword argument 'labelpad'\nAccuracy: 0.8133333333333334\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        29\n           1       0.71      0.65      0.68        23\n           2       0.68      0.74      0.71        23\n\n    accuracy                           0.81        75\n   macro avg       0.80      0.80      0.80        75\nweighted avg       0.81      0.81      0.81        75\n\nConfusion Matrix:\n [[29  0  0]\n [ 0 15  8]\n [ 0  6 17]]\n\n\n--------------------------------------------------------------------------------\ncode_writer_agent (to code_executor_agent):\n\nThe error message indicates that the `colorbar` function does not accept a `labelpad` keyword argument. This is because the `colorbar` function in matplotlib does not have a `labelpad` parameter.\n\nTo fix this issue, you can remove the `plt.colorbar(labelpad=10)` line from your code. The colorbar will still be displayed, but it won't have any labels.\n\nHere's the corrected code:\n\n```Python\n# filename: iris_logistic_regression.py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Load the iris dataset\niris = load_iris()\nX = iris.data[:, :2]  # we only take the first two features.\ny = iris.target\n\n# Train/Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\n# Logistic Regression\nlogreg = LogisticRegression(max_iter=10000)\nlogreg.fit(X_train, y_train)\n\n# Predictions\ny_pred = logreg.predict(X_test)\n\n# Accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n\n# Classification Report\nreport = classification_report(y_test, y_pred)\nprint(\"Classification Report:\\n\", report)\n\n# Confusion Matrix\nmatrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", matrix)\n\n# Plot the data points\nplt.figure(figsize=(8, 6))\nplt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap='viridis')\nplt.xlabel('Sepal length (cm)')\nplt.ylabel('Sepal width (cm)')\n\n# Plot the decision boundaries\nx_min, x_max = X_test[:, 0].min() - 1, X_test[:, 0].max() + 1\ny_min, y_max = X_test[:, 1].min() - 1, X_test[:, 1].max() + 1\n\nxx, yy = np.meshgrid(np.arange(x_min, x_max), np.arange(y_min, y_max))\nZ = logreg.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(xx, yy, Z, alpha=0.8)\nplt.colorbar()\n\nplt.show()\n```\n\nThis code will perform a 3-class logistic regression on the iris dataset using scikit-learn's `LogisticRegression` class. It then plots the data points colored according to their labels and also plots the decision boundaries of the classifier.\n\n--------------------------------------------------------------------------------\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EXECUTING CODE BLOCK (inferred language is Python)...\ncode_executor_agent (to code_writer_agent):\n\nexitcode: 0 (execution succeeded)\nCode output: Accuracy: 0.8133333333333334\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        29\n           1       0.71      0.65      0.68        23\n           2       0.68      0.74      0.71        23\n\n    accuracy                           0.81        75\n   macro avg       0.80      0.80      0.80        75\nweighted avg       0.81      0.81      0.81        75\n\nConfusion Matrix:\n [[29  0  0]\n [ 0 15  8]\n [ 0  6 17]]\nFigure(800x600)\n\n\n--------------------------------------------------------------------------------\n\n\n\nfrom IPython.display import Image\nImage(filename=\"generated_code/logistic_reg_decision_boundaries.png\")"
  },
  {
    "objectID": "README_to_publish.html",
    "href": "README_to_publish.html",
    "title": "How to publish this site",
    "section": "",
    "text": "How to publish this site\nDon’t commit entire set of files only the docs folder as below.\nquarto render\ngit add docs\ngit commit -m \"Publish site to docs/\"\ngit push"
  }
]